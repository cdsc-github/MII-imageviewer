<?xml version="1.0"?>
<!DOCTYPE project [
  <!ENTITY customize-targets SYSTEM "./tools/targets/customize.xml">
]>
<project name="ImageViewer" default="dist" basedir=".">
  &customize-targets;
  <path id="classpath">
    <fileset dir="./lib">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="./lib/server">
      <include name="*.jar"/>
    </fileset>
  </path>

	<!-- You must set this fileset path to point to your JavaFX install -->

  <path id="javafx.classpath">
    <fileset dir="C:/Program Files (x86)/JavaFX/lib/">
      <include name="**/*.jar" />
    </fileset>
  </path>

	<taskdef classname="com.sun.tools.javafx.ant.JavaFxAntTask" name="javafxc">
    <classpath refid="javafx.classpath"/>
  </taskdef>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->

  <target name="init">
    <tstamp/>
    <property name="fullname" value="imageviewer"/>
    <property name="Name" value="imageviewer"/>
    <property name="name" value="imageviewer"/>
    <property name="version" value="2.3"/>
    <property name="year" value="2007"/>

    <echo message="------------------- ${fullname} ${version} [${year}] ----------------"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="build.compiler" value="modern"/>
    <property name="target.vm" value="1.6"/>
    <property name="src.dir" value="./src"/>
    <property name="config.dir" value="./config"/>
    <property name="resources.dir" value="./resources"/>
    <property name="temp.dir" value="./tmp"/>

    <property name="lib.dir" value="./lib"/>
    <property name="lib.packageLists" value="${lib.dir}/package-lists"/>
    <property name="packages" value="imageviewer.*"/>

    <property name="build.root" value="./build"/>
    <property name="build.dir" value="${build.root}/${name}"/>
    <property name="build.src" value="${build.dir}/${src.dir}"/>
    <property name="build.dest" value="${build.dir}/classes"/>
    <property name="build.lib" value="${build.dir}/lib"/>
    <property name="build.doc" value="${build.dir}/docs"/>

		<property name="libs.mii" value="./lib/server/imageserver.jar ./lib/utility-1.5.jar"/>
		<property name="libs.server" value="./lib/log4j-1.2.8.jar ./lib/server/hibernate3.jar ./lib/server/dom4j-1.6.1.jar ./lib/server/commons-logging-1.0.4.jar 
																				./lib/server/commons-collections-2.1.1.jar ./lib/server/hsqldb.jar ./lib/server/c3p0-0.9.1.jar ./lib/server/cglib-2.1.3.jar 
																				./lib/server/asm.jar ./lib/server/asm-attrs.jar ./lib/server/jta.jar ./lib/server/antlr-2.7.6.jar ./lib/server/ehcache-1.2.3.jar"/>
		<property name="libs.jai" value="./lib/jai_imageio.jar ./lib/jai_codec.jar ./lib/jai_core.jar ./lib/mlibwrapper_jai.jar ./lib/clibwrapper_jiio.jar"/>
		<property name="libs.j3d" value="./lib/3d/vecmath.jar ./lib/3d/j3dutils.jar ./lib/3d/j3dcore.jar"/>
		<property name="libs.jogl" value="./lib/jogl.jar ./lib/msg.jar"/>
		<property name="libs.jfreechart" value="./lib/jfreechart-1.0.5.jar ./lib/jcommon-1.0.9.jar"/>
		<property name="libs.l2fprod" value="./lib/l2fprod-common-all.jar"/>
		<property name="libs.prefuse" value="./lib/prefuse.jar"/>
		<property name="libs.flamingo" value="./lib/flamingo/flamingo.jar"/>
		<property name="libs.swingx" value="./lib/swingx.jar ./lib/swing-worker.jar ./lib/TimingFramework.jar"/>
		<property name="libs.security" value="./lib/tagishauth.jar"/>

    <property name="libs" value=". ./lib/ant.jar ./lib/commons-cli-1.0.jar ./lib/forms-1.0.7.jar ${libs.swingx} ${libs.server} ${libs.jai} ${libs.flamingo}
																 ${libs.jfreechart} ${libs.j3d} ${libs.mii} ${libs.jogl} ${libs.l2fprod} ${libs.security} ${libs.prefuse}"/>
 
    <property name="dist.root" value="./dist"/>
    <property name="dist.dir" value="${dist.root}/${name}"/>
    <property name="dist.target" value="${dist.root}"/>
    <property name="dist.config" value="${dist.dir}/config"/>
    <property name="dist.config.dtd" value="${dist.dir}/config/dtd"/>    
    <property name="dist.resources" value="${dist.dir}/resources"/>

    <filter token="name" value="${fullname}"/>
    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
    <filter token="log" value="true"/>
    <filter token="verbose" value="true"/>

    <fileset id="configFiles" dir="${config.dir}">
      <include name="**/*.xml"/>
      <include name="**/*.js"/>
      <include name="**/*.png"/>
      <include name="**/*.txt"/>
      <include name="**/*.gif"/>
    </fileset>
    
     <fileset id="resourceFiles" dir="${resources.dir}">
      <include name="**/*.xml"/>
      <include name="**/*.js"/>
      <include name="**/*.png"/>
      <include name="**/*.txt"/>
      <include name="**/*.gif"/>
      <include name="**/*.dat"/>
    </fileset>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->

  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/config"/>
    <mkdir dir="${build.dir}/resources"/>
    <mkdir dir="${build.dir}/docs"/>
    <copy todir="${build.dir}/config" filtering="off">
      <fileset dir="./config">
      </fileset>
    </copy>
    <copy todir="${build.dir}/resources" filtering="off">
      <fileset dir="./resources">
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->

  <target name="prepare-src-main" depends="prepare">
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.lib}"/>
    <copy todir="${build.src}" filtering="off">
      <fileset dir="${src.dir}">
        <exclude name="**/*.dfPackage"/> 
        <exclude name="**/*.dfPackage.wmf"/> 
        <exclude name="**/.#*"/> 
        <exclude name="**/*.bak"/> 
        <exclude name="**/*.hid"/> 
        <exclude name="**/test/**"/>
        <exclude name="**/*.*~"/>
        <exclude name="**/*.*$$$"/>
      </fileset>
    </copy>
    <copy todir="${build.lib}" filtering="off">
      <fileset dir="${lib.dir}">
        <include name="**/**"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare-src" depends="prepare-src-main"/>
  
  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->

  <target name="compile" depends="prepare-src" description="Compiles the source code">
    <javac srcdir="${build.src}" destdir="${build.dest}" debug="${debug}" optimize="${optimize}" deprecation="${deprecation}" target="${target.vm}">
      <classpath refid="classpath"/>
      <exclude name="**/*.*~"/>
      <exclude name="**/*.*$$$"/>
	<!-- <compilerarg value="-Xlint"/> -->
    </javac>
  </target>

	<target name="fx" depends="package" description="Builds fx applications">
		<javafxc srcdir="${build.src}" destdir="${build.dest}" includes="**/*.fx" executable="javafxc">
      <classpath refid="javafx.classpath"/>
		</javafxc> 
	</target>

  <!-- =================================================================== -->
  <!-- Compiles the javadocs                                               -->
  <!-- =================================================================== -->

  <target name="javadoc" depends="prepare-src" description="Generates javadocs">
    <javadoc destdir="${build.doc}" author="true" version="true" use="true" windowtitle="UCLA MII imageviewer API" access="private">
      <packageset dir="${build.src}" defaultexcludes="yes">
        <include name="imageviewer/**" />
      </packageset>
      <link offline="true" href="http://logging.apache.org/log4j/docs/api" packagelistLoc="${lib.packageLists}/log4j"/>
      <link offline="true" href="http://java.sun.com/j2se/1.5/docs/api" packagelistLoc="${lib.packageLists}/java"/>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->

  <target name="package" depends="compile" description="Generates the jar package">
    <jar jarfile="${build.dir}/${name}.jar">
      <fileset dir="${build.dest}"/>
      <fileset dir="${config.dir}">
      	<include name="log4j.properties"/>
      </fileset>
      <fileset dir="${build.src}">
        <include name="**/*.xml"/>
				<include name="**/*.html"/>
				<include name="**/*.js"/>
				<include name="**/*.png"/>
				<include name="**/*.txt"/>
				<include name="**/*.css"/>
				<include name="**/*.gif"/>
        <exclude name="**/*.java"/>
        <exclude name="**/*.*~"/>
        <exclude name="**/*.*$$$"/>
      </fileset>
			<fileset dir="${build.dir}/resources">
				<include name="splash-screen.png"/>
      </fileset>
      <manifest>
        <attribute name="Manifest-Version" value="1.0"/>
        <attribute name="Built-By" value="buia"/>
				<attribute name="Class-Path" value="${libs}"/>
      	<attribute name="Main-Class" value="imageviewer.system.ImageViewerClient"/>
				<attribute name="SplashScreen-Image" value="splash-screen.png"/>
      </manifest>     
    </jar>
  </target>
	
  <target name="package-dicom" depends="compile" description="Generates the jar with DICOM libraries">
    <jar jarfile="${build.dir}/${name}-dicom.jar">
      <fileset dir="${build.dest}">
        <include name="imageviewer/model/*.class*"/>
        <include name="imageviewer/model/dicom/**"/>
		    <exclude name="imageviewer/model/dicom/**/test/**"/>      	      	
      </fileset>
      <manifest>
        <attribute name="Manifest-Version" value="1.0"/>
        <attribute name="Built-By" value="dmitri and bootsie"/>
      </manifest>     
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- dist-prepare                                                        -->
  <!-- =================================================================== -->  

  <target name="dist-prepare" depends="package" description="* Gathers all the jars for tgz dist">

    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.config}"/>
    <mkdir dir="${dist.resources}"/>
    <copy todir="${dist.config}">
      <fileset refid="configFiles"/>
    </copy>
    <copy todir="${dist.resources}">
      <fileset refid="resourceFiles"/>
    </copy>
    <copy file="${build.dir}/${name}.jar" tofile="${dist.dir}/${name}.jar"/>
		<echo>copying to ${dist.dir}/lib</echo>
  	<copy todir="${dist.dir}/lib">
			<fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
		</copy>
  	<copy todir="${dist.dir}">
      <fileset dir="${src.dir}">
        <include name="readme.txt"/>
        <include name="config/**"/>
        <include name="resources/**"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with .tar.gz                              -->
  <!-- =================================================================== -->

  <target name="dist" depends="dist-prepare" description="* Generates the distribution as a .tar.gz file"></target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->

  <target name="clean" depends="init" description="* Cleans the build directories">
    <delete dir="${build.dir}"/>
    <delete dir="${build.root}"/>
    <delete file="${dist.target}/${Name}.tar.gz"/>
    <delete file="${dist.target}/${Name}.tar"/>
    <delete file="${dist.target}/${Name}.zip"/>
    <delete dir="${dist.root}"/>
  </target>

 </project>
